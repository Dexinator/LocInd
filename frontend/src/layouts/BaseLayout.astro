---
// src/layouts/BaseLayout.astro
import '../styles/global.css'; // Importaremos los estilos globales de Tailwind aquí
import Header from '../components/Header.astro'; // Importar el Header real
import Footer from '../components/Footer.astro'; // Importar el Footer real
import WhatsAppButton from '../components/WhatsAppButton.astro'; // Importar el botón de WhatsApp
import { SEO } from 'astro-seo';

// Props que puede recibir el layout (ej. título de la página)
interface Props {
	title: string;
    description?: string; // Opcional para meta descripción
    image?: string; // Para compartir en redes sociales
    canonicalURL?: string;
}

const { 
    title, 
    description = 'Localización Industrial - Precisión que transforma la industria',
    image = '/og-image.jpg',  // imagen por defecto
    canonicalURL = Astro.url.href 
} = Astro.props;

// Verificar si estamos en producción
const isProd = import.meta.env.PROD;

// Generar URL completa para imágenes compartidas
const fullImageUrl = image.startsWith('http') ? image : `https://localizacion-industrial.com${image}`;
---

<!doctype html>
<html lang="es" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		
        <SEO
            title={`${title} | Localización Industrial`}
            description={description}
            canonical={canonicalURL}
            openGraph={{
                basic: {
                    title: `${title} | Localización Industrial`,
                    type: "website",
                    image: fullImageUrl,
                },
                optional: {
                    description: description,
                    siteName: "Localización Industrial",
                    locale: "es_MX",
                }
            }}
            twitter={{
                card: "summary_large_image",
                site: "@locualizacionindustrial",
                title: `${title} | Localización Industrial`,
                description: description,
                image: fullImageUrl,
                imageAlt: "Localización Industrial logo",
            }}
            extend={{
                link: [
                    { rel: "icon", href: "/favicon.ico" },
                    { rel: "apple-touch-icon", href: "/apple-touch-icon.png" },
                    { rel: "manifest", href: "/manifest.webmanifest" }
                ],
                meta: [
                    { name: "theme-color", content: "#5E35B1" },
                ]
            }}
        />

        <!-- Google Fonts -->
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500;700;900&family=Roboto:wght@400;700&display=swap" rel="stylesheet">

        <!-- Script para inicializar tema oscuro y evitar parpadeos -->
        <script is:inline>
            // Inicializar tema antes del renderizado para evitar parpadeos
            const savedTheme = localStorage.getItem('theme');
            
            if (savedTheme === 'dark' || 
                (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        </script>
	</head>
	<body class="min-h-screen flex flex-col bg-background-light dark:bg-background-dark text-text-base dark:text-text-light transition-colors duration-100">
		<Header />
		<main class="flex-grow">
			<slot />
		</main>
		<Footer />
		<WhatsAppButton />

        {isProd && (
            <script>
                import { registerSW } from 'virtual:pwa-register';
                
                // Este register devuelve una función que refresca periódicamente el Service Worker
                const updateSW = registerSW({
                    onNeedRefresh() {
                        const confirmed = confirm('Nueva versión disponible. ¿Actualizar ahora?');
                        if (confirmed) {
                            updateSW(true);
                        }
                    },
                    onOfflineReady() {
                        console.log('La aplicación está lista para uso sin conexión');
                    }
                });
            </script>
        )}
	</body>
</html> 